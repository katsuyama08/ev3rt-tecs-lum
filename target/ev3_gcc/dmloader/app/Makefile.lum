#
# Makefile for a Loadable User Module (Common Part)
#
# Input:
# $(GCC_TARGET)
# $(MODCFG)
# $(MODDIR)
# $(MODOBJS)
# $(KERNELDIR)
# $(SRCDIRS)
# $(LOADERDIR)
# $(COPTS)
#

#
# Tools
#
AR := $(GCC_TARGET)-ar
CFG := $(KERNELDIR)/cfg/cfg/cfg
CFGLINK := $(GCC_TARGET)-gcc -nostartfiles
NM := $(GCC_TARGET)-nm
OBJCOPY := $(GCC_TARGET)-objcopy

#
#  mruby 関係の設定 (yamauchi)
#
TARGET = ev3_gcc
MRUBY_SRC_DIR = $(KERNELDIR)/mruby
MRUBY_LIB = $(MRUBY_SRC_DIR)/build/ARM/lib/libmruby.a -lm

ifeq ($(OS),Windows_NT)
MRBC = $(MRUBY_SRC_DIR)/bin/mrbc.exe
EXE := $(TARGET).exe
else
MRBC = $(MRUBY_SRC_DIR)/bin/mrbc
EXE := $(TARGET)
endif

#
#  TECSインタフェースジェネレータ関係の定義 (yamauchi)
#
GCC_TARGET_PREFIX = $(GCC_TARGET)-
RUBY = /usr/bin/ruby
RUBYLIB = $(KERNELDIR)/tecsgen/tecsgen
TECSGEN_DIR = $(RUBYLIB)
TECSGEN = $(RUBY) $(TECSGEN_DIR)/tecsgen.rb -L $(RUBYLIB) -k euc --cpp="$(GCC_TARGET_PREFIX)gcc -E"
TECSLIB_DIR = $(KERNELDIR)/tecs_lib
MRUBY_LIB_DIR = $(KERNELDIR)/mruby_lib

#
#  TECSが生成する定義のインクルード (yamauchi)
#
-include $(KERNELDIR)/sdk/OBJ/gen/Makefile.tecsgen

#
# Process configuration files
#

CFG_TABS := --api-table $(LOADERDIR)/app/common/module_api.csv \
			--cfg1-def-table $(LOADERDIR)/app/common/module_def.csv $(CFG_TABS)

CFG1_OUT = cfg1_out

cfg1_out.o: $(MODCFG)
	$(CFG) --pass 1 --kernel hrp2 $(INCLUDES) $(CFG_TABS) $<
	$(CFGLINK) $(CFLAGS) -nostartfiles cfg1_out.c -o cfg1_out.o

CFG2_OUT_SRCS := kernel_cfg.h kernel_cfg.c kernel_mem2.c $(CFG2_OUT_SRCS)

$(CFG2_OUT_SRCS): $(MODCFG) \
						$(START_OBJS) cfg1_out.o $(END_OBJS) $(HIDDEN_OBJS)
	$(CFGLINK) $(CFLAGS) $(CFG1_OUT_LDFLAGS) -o $(CFG1_OUT) \
						$(START_OBJS) cfg1_out.o $(END_OBJS)
	$(NM) -n $(CFG1_OUT) > cfg1_out.syms
	$(OBJCOPY) -O srec -S $(CFG1_OUT) cfg1_out.srec
	$(CFG) --pass 2 --kernel hrp2 $(INCLUDES) \
				-T $(KERNELDIR)/kernel/kernel.tf $(CFG_TABS) $<
	touch -r kernel_cfg.c kernel_cfg.timestamp

CFG_OUT_SRCS := module_cfg.h module_cfg.c
$(CFG_OUT_SRCS): $(MODCFG)
	$(call print_cmd, "CFG[1]", $@)
	@$(CFG) --pass 1 --kernel hrp2 $(INCLUDES) $(CFG_TABS) $<
	@$(CFGLINK) $(CFLAGS) -Wl,-Ttext,0x00000000 -Wl,-e,0 -o cfg1_out.o cfg1_out.c
	@$(CFGLINK) $(CFLAGS) $(CFG1_OUT_LDFLAGS) -Wl,-e,0 -o $(CFG1_OUT) cfg1_out.o
	@$(NM) -n $(CFG1_OUT) > cfg1_out.syms
	@$(OBJCOPY) -O srec -S $(CFG1_OUT) cfg1_out.srec
	$(call print_cmd, "CFG[2]", $@)
	@$(CFG) --pass 2 --kernel hrp2 $(INCLUDES) \
	   -I$(TARGETDIR)/api -I $(LOADERDIR)/app/common \
				-T $(LOADERDIR)/app/common/module.tf $(CFG_TABS) $<

CLEAN_FILES += $(CFG1_OUT) cfg1_out.o cfg1_out.c cfg1_out.syms cfg1_out.srec $(CFG_OUT_SRCS)

#CC = arm-none-eabi-gcc -fPIC -nostdlib -std=c99 -nostartfiles -fno-strict-aliasing -mcpu=arm926ej-s -mlittle-endian -D__TARGET_ARCH_ARM=5
#LINK = arm-none-eabi-ld -nostdlib -nostartfiles
#CC = arm-none-eabi-gcc -shared -fPIC -nostdlib -std=c99 -fno-strict-aliasing -mcpu=arm926ej-s -mlittle-endian -D__TARGET_ARCH_ARM=5
CC = arm-none-eabi-gcc -fPIC -mno-pic-data-is-text-relative -nostdlib -std=gnu99 -fno-strict-aliasing -mcpu=arm926ej-s -mlittle-endian -D__TARGET_ARCH_ARM=5
CXX = arm-none-eabi-g++ -fPIC -mno-pic-data-is-text-relative -nostdlib -std=gnu++11 -fno-strict-aliasing -mcpu=arm926ej-s -mlittle-endian -D__TARGET_ARCH_ARM=5
#LINK = arm-none-eabi-ld -nostdlib -shared -fPIC

# -n to make file size small
#LINK = arm-none-eabi-ld -n -pie
LINK = arm-none-eabi-gcc -Wl,-nmagic -nostdlib -pie

LDSCRIPT = $(LOADERDIR)/app/app.ld

#
#  共通コンパイルオプションの定義
#
ifdef TEXT_START_ADDRESS
  LDFLAGS := $(LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)
  CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -Wl,-Ttext,$(TEXT_START_ADDRESS)
endif
ifdef DATA_START_ADDRESS
  LDFLAGS := $(LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)
  CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -Wl,-Tdata,$(DATA_START_ADDRESS)
endif
ifdef LDSCRIPT
  LDFLAGS := $(LDFLAGS) -T $(LDSCRIPT)
  #CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -T $(LDSCRIPT)
endif
ifndef OMIT_DEBUG_INFO
COPTS += -g
endif
ifndef OMIT_WARNING_ALL
  COPTS := $(COPTS) -Wall
endif
ifndef OMIT_OPTIMIZATION
  COPTS := $(COPTS) -O2
endif
CDEFS := $(CDEFS)

#
#  共通コンパイルオプションの定義 (yamauchi)
#
INCLUDES := $(INCLUDES) -I. -I$(KERNELDIR)/include -I$(KERNELDIR)/arch -I$(KERNELDIR) -I$(PWD)/include \
	-I$(KERNELDIR)/tecs_kernel \
	-I$(KERNELDIR)/target/ev3_gcc/api -I$(KERNELDIR)/target/ev3_gcc/api/include -I$(KERNELDIR)/target/ev3_gcc/api/src \
	-I$(MRUBY_SRC_DIR)/include \
	-I$(KERNELDIR)/tecs_lib/mindstorms_ev3 -I$(KERNELDIR)/tecs_lib/common \
	-I$(TECSGEN_DIR)/tecs \
    -I$(TECSGEN_DIR)/tecs/mruby \
    -I$(TECSGEN_DIR)/tecs/TLSFMalloc \
    -I$(TECSGEN_DIR)/tecs/posix \
	-I$(KERNELDIR)/sdk/OBJ -I$(KERNELDIR)/sdk/OBJ/gen

LDFLAGS := $(LDFLAGS) -L $(MRUBY_SRC_DIR)/build/ARM/lib/
CFG1_OUT_LDFLAGS := $(CFG1_OUT_LDFLAGS) -L $(MRUBY_SRC_DIR)/build/ARM/lib/
LIBS := $(LIBS) $(CXXLIBS)
CFLAGS = $(COPTS) $(CDEFS) $(INCLUDES)

#
# Include source files
#
SRCDIRS += $(KERNELDIR)/library
vpath %.c $(SRCDIRS)
vpath %.cpp $(SRCDIRS)

#
# Object file (yamauchi)
#
ALL_OBJS += module_cfg.o $(MODOBJS) $(TECS_COBJS)
ALL_CXXOBJS += $(APPL_CXXOBJS)
ALL_LIBS += $(LIBS) $(APPL_LIBS)
$(OBJFILE): $(CFG_OUT_SRCS) $(ALL_OBJS) $(ALL_CXXOBJS) $(WORKSPACE_LIB_TO_BUILD)
	$(call print_cmd, "LD", $@)
	@$(LINK) $(LDFLAGS) -o $(OBJFILE) $(ALL_OBJS) $(ALL_CXXOBJS) $(ALL_LIBS) -lm -lc -lgcc
#arm-none-eabi-strip -K _module_cfg_entry_num -K _module_cfg_tab -K _module_pil_version --strip-all app

#
#  TECSインタフェースジェネレータの実行 (yamauchi)
#
tecs.timestamp: $(APPL_CDL) $(TECS_IMPORTS) Makefile
	$(call print_cmd, "TECSGEN", $<)
	$(TECSGEN) -R -D TECSGEN -D TECS_CPP -I$(TECSGEN_DIR)/tecslib/plugin $(INCLUDES) $(APPL_CDL)
	touch tecs.timestamp

.PHONY: tecs
tecs: tecs.timestamp

#
# Function definitions
#
define print_cmd
  @printf "  %-7s %s\n" $1 $2
endef

$(ALL_OBJS): %.o: %.c
	$(call print_cmd, "CC", $<)
	@$(CC) -c $(CFLAGS) $<

$(ALL_CXXOBJS): %.o: %.cpp
	$(call print_cmd, "CXX", $<)
	@$(CXX) -c $(CFLAGS) $<

.PHONY: clean
clean:
	rm -f $(CLEAN_FILES) \#* *~ *.o
